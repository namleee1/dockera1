#!/usr/bin/env python
# coding: utf-8

# In[2]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.api import VAR
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from xgboost import XGBRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error
from statsmodels.tsa.api import VAR
from tensorflow.keras.optimizers import Adam
from xgboost import XGBRegressor
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import os
import streamlit as st


# T·∫£i file l√™n Streamlit
uploaded_file = st.file_uploader("/kaggle/input/datastreamlit/Data system POC_11Nov2024(mod).xlsx", type=["xlsx", "xls"])

if uploaded_file is not None:
    # ƒê·ªçc file Excel
    df = pd.read_excel(uploaded_file, sheet_name="Data- refinitiv")
    df1 = pd.read_excel(uploaded_file, sheet_name="Sheet2")

    plt.figure(figsize=(11,7)) # K√≠ch c·ª° bi·ªÉu ƒë·ªì
    plt.grid(True)


    fig, ax = plt.subplots()
    ax.plot(df["Date"], df["FEDRATE"], marker= '+', color= 'b' )
    ax.set_title("FEDRATE CHANGES AFTER YEARS")
    ax.set_xlabel("DATE")
    ax.set_ylabel("FEDRATE")
    ax.legend()

    st.pyplot(fig)

    plt.figure(figsize=(11,7)) # K√≠ch c·ª° bi·ªÉu ƒë·ªì
    plt.grid(True)


    fig, ax = plt.subplots()
    ax.plot(df["Date"], df["DXY"], marker= '+', color= 'b' )
    ax.set_title("DXY CHANGES AFTER YEARS")
    ax.set_xlabel("DATE")
    ax.set_ylabel("DXY")
    ax.legend()

    st.pyplot(fig)

    plt.figure(figsize=(11,7)) # K√≠ch c·ª° bi·ªÉu ƒë·ªì
    plt.grid(True)
    fig, ax = plt.subplots()
    ax.plot(df["Date"], df["VND"], marker= '+', color= 'b' )
    ax.set_title("VND-USD CHANGES AFTER YEARS")
    ax.set_xlabel("VND-USD")
    ax.set_ylabel("VND-USD")
    ax.legend()

    st.pyplot(fig)

    plt.figure(figsize=(11,7)) # K√≠ch c·ª° bi·ªÉu ƒë·ªì
    plt.grid(True)
    fig, ax = plt.subplots()
    ax.plot(df["Date"], df["OMOrate"], marker= '+', color= 'b' )
    ax.set_title("OMOrate CHANGES AFTER YEARS")
    ax.set_xlabel("DATE")
    ax.set_ylabel("OMOrate")
    ax.legend()

    st.pyplot(fig)

    plt.figure(figsize=(11,7)) # K√≠ch c·ª° bi·ªÉu ƒë·ªì
    plt.grid(True)
    fig, ax = plt.subplots()
    ax.plot(df["Date"], df["SBVcentralrate"], marker= '+', color= 'b' )
    ax.set_title("SBVcentralrate CHANGES AFTER YEARS")
    ax.set_xlabel("DATE")
    ax.set_ylabel("SBVcentralrate")
    ax.legend()

    st.pyplot(fig)

    #hi·ªÉn th·ªã t∆∞∆°ng quan gi·ªØa c√°c c·ªôt
    correlation_matrix = df.corr()
    st.write(correlation_matrix)

    # Ng∆∞·ªùi d√πng nh·∫≠p t√™n ch·ªâ s·ªë v√† s·ªë ng√†y c·∫ßn xem
    name = st.text_input("Nh·∫≠p t√™n ch·ªâ s·ªë mu·ªën xem d·ªØ li·ªáu l·ªãch s·ª≠ (FEDRATE, DXY, VND, OMOrate, SBVcentralrate):")
    n = st.number_input("Nh·∫≠p s·ªë ng√†y mu·ªën xem:", min_value=1, step=1)

    if name and n:
        if name == 'FEDRATE':
            st.write(df[['Date', 'FEDRATE']].iloc[:n])
        elif name == 'DXY':
            st.write(df[['Date', 'DXY']].iloc[:n])
        elif name == 'VND':
            st.write(df[['Date', 'VND']].iloc[:n])
        elif name == 'OMOrate':
            st.write(df[['Date', 'OMOrate']].iloc[:n])
        elif name == 'SBVcentralrate':
            st.write(df[['Date', 'SBVcentralrate']].iloc[:n])
        else:
            st.warning("Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ c√°c ch·ªâ s·ªë tr√™n.")

        # H√†m train m√¥ h√¨nh xgb

    df["Date"] = pd.to_datetime(df["Date"])
    df1["Date"] = pd.to_datetime(df1["Date"])
    df1["VND"] = df1["VND"].astype(str).str.replace(" ", "").astype(float)
    df = df.sort_values("Date")
    #df = df.drop(['OMOrate', 'SBVcentralrate'], axis=1)  # Ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt quan tr·ªçng

    train = df[df["Date"].dt.year < 2024].drop(columns=["Date"])
    test = df[df["Date"].dt.year == 2024].drop(columns=["Date"])
    scaler = MinMaxScaler()
    train_scaled = scaler.fit_transform(train)
    test_scaled = scaler.transform(test)

                # Hu·∫•n luy·ªán m√¥ h√¨nh XGBoost (S·ª¨A L·ªñI)
    def xgb_model(train_scaled, test_scaled, scaler, num_features):
        X_train = train_scaled[:, 1:]  
        y_train = train_scaled[:, 2]  # C·ªôt VND
        X_test = test_scaled[:, 1:]

        model = XGBRegressor(n_estimators=200, learning_rate=0.06, max_depth= 8)
        model.fit(X_train, y_train)
        pred = model.predict(X_test)
        temp = np.zeros((len(pred), num_features))  
        temp[:, 2] = pred  # C·ªôt th·ª© 3 (index 2) ch·ª©a VND
        return scaler.inverse_transform(temp)[:, 2]

    xgb_pred = xgb_model(train_scaled, test_scaled, scaler, num_features)

    st.write("\nüìä K·∫øt qu·∫£ d·ª± b√°o XGBoost:")
    st.write("Ng√†y       | D·ª± b√°o   | Xu h∆∞·ªõng | % Thay ƒë·ªïi")
    st.write("-------------------------------------------")

    for i in range(1, n_days):
        forecast_dates = pd.date_range(start=df["Date"].iloc[-1] + pd.Timedelta(days=1), periods=n_days, freq='D')
        date_str = forecast_dates[i].strftime("%d-%m-%Y")
        prev_value = xgb_pred[i - 1]  # Gi√° tr·ªã ng√†y tr∆∞·ªõc
        curr_value = xgb_pred[i]  # Gi√° tr·ªã ng√†y hi·ªán t·∫°i
        change_percent = ((curr_value - prev_value) / prev_value) * 100  # % thay ƒë·ªïi
        trend = "üìà Up" if curr_value > prev_value else "üìâ Down"

    st.write(f"{date_str} | {curr_value:.2f} | {trend} | {change_percent:.2f}%")

                # V·∫Ω bi·ªÉu ƒë·ªì
    plt.figure(figsize=(12, 6))

    plt.plot(forecast_dates, df1["VND"][:n_days].values, label="Th·ª±c t·∫ø", color="blue")
    plt.plot(forecast_dates, xgb_pred[:n_days], label="XGBoost", linestyle="dashed", color="purple")


    plt.xlabel("Ng√†y")
    plt.ylabel("T·ª∑ gi√° VND-USD")
    plt.title("D·ª± b√°o t·ª∑ gi√° VND-USD")
    plt.legend()
    plt.show()

    st.pyplot(plt)


# üîπ L·∫•y m·∫≠t kh·∫©u email t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
EMAIL_SENDER = "namltmta@gmail.com"
EMAIL_PASSWORD = "jlxk sqlk gckc eqzz"

# üîπ Nh·∫≠p email ng∆∞·ªùi nh·∫≠n t·ª´ Streamlit
EMAIL_RECEIVER = st.text_input('M·ªùi b·∫°n nh·∫≠p v√†o email ng∆∞·ªùi nh·∫≠n:')

# üîπ Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p email
if EMAIL_RECEIVER:
    # üîπ Gi·∫£ l·∫≠p d·ªØ b√°o t·ª∑ gi√° (d·ªØ li·ªáu m·∫´u)
    forecast_dates = forecast_dates
    predictions = predictions

    # üîπ T·∫°o n·ªôi dung email
    email_content = "<h2>D·ª± b√°o t·ª∑ gi√° VND-USD tu·∫ßn t·ªõi</h2><table border='1' cellpadding='5'>"
    email_content += "<tr><th>Ng√†y</th><th>D·ª± ƒëo√°n gi√°</th></tr>"

    for date, price in zip(forecast_dates, predictions):
        email_content += f"<tr><td>{date}</td><td>{price:.2f} USD</td></tr>"

    email_content += "</table>"

    # üîπ Thi·∫øt l·∫≠p email
    msg = MIMEMultipart()
    msg['From'] = EMAIL_SENDER
    msg['To'] = EMAIL_RECEIVER
    msg['Subject'] = "B√°o c√°o d·ª± b√°o t·ª∑ gi√° VND-USD tu·∫ßn t·ªõi"
    msg.attach(MIMEText(email_content, 'html'))

    # üîπ G·ª≠i email qua SMTP (Gmail SMTP Server)
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())
        server.quit()
        st.success("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi g·ª≠i email: {str(e)}")



# In[ ]:




